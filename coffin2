#include <windows.h>
#include <bcrypt.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <conio.h>

#pragma comment(lib, "bcrypt.lib")

#define NT_SUCCESS(Status) (((NTSTATUS)(Status)) >= 0)
#define AES_KEY_LENGTH 32
#define NONCE_LENGTH 12
#define MAC_LENGTH 16
#define HMAC_KEY_LENGTH 32
#define MAX_PATH_LENGTH 260
#define PBKDF2_ITERATIONS 100000
#define CHUNK_SIZE (1024 * 1024) // 1 MB

// Error handling macro
#define CHECK_STATUS(status, msg) if (!NT_SUCCESS(status)) { printf("Error: %s (0x%08x)\n", msg, status); goto cleanup; }

// Function to prompt for password (hidden input with _getch)
char* GetPassword() {
    char* password = (char*)malloc(100);
    if (!password) return NULL;
    printf("Enter password: ");
    int i = 0;
    char ch;
    while ((ch = _getch()) != '\r' && i < 99) {
        if (ch == '\b' && i > 0) {
            i--;
            printf("\b \b");
        } else if (ch != '\b' && ch >= 32 && ch <= 126) { // Printable ASCII
            password[i++] = ch;
            printf("*");
        }
    }
    password[i] = '\0';
    printf("\n");
    return password;
}

// Derive key using PBKDF2
NTSTATUS DeriveKey(const char* password, BYTE* key, DWORD keyLength) {
    BCRYPT_ALG_HANDLE hAlg = NULL;
    NTSTATUS status;

    status = BCryptOpenAlgorithmProvider(&hAlg, BCRYPT_SHA256_ALGORITHM, NULL, BCRYPT_ALG_HANDLE_HMAC_FLAG);
    CHECK_STATUS(status, "Failed to open SHA256 provider");

    status = BCryptDeriveKeyPBKDF2(hAlg, (PUCHAR)password, (ULONG)strlen(password), NULL, 0, PBKDF2_ITERATIONS, key, keyLength, 0);
    CHECK_STATUS(status, "Failed to derive key");

cleanup:
    if (hAlg) BCryptCloseAlgorithmProvider(hAlg, 0);
    return status;
}

// Compute HMAC-SHA256
NTSTATUS ComputeHMAC(const BYTE* data, DWORD dataLength, const BYTE* key, DWORD keyLength, BYTE* hmac, DWORD* hmacLength) {
    BCRYPT_ALG_HANDLE hAlg = NULL;
    BCRYPT_HASH_HANDLE hHash = NULL;
    NTSTATUS status;

    status = BCryptOpenAlgorithmProvider(&hAlg, BCRYPT_SHA256_ALGORITHM, NULL, BCRYPT_ALG_HANDLE_HMAC_FLAG);
    CHECK_STATUS(status, "Failed to open HMAC provider");

    status = BCryptCreateHash(hAlg, &hHash, NULL, 0, (PUCHAR)key, keyLength, 0);
    CHECK_STATUS(status, "Failed to create HMAC hash");

    status = BCryptHashData(hHash, (PUCHAR)data, dataLength, 0);
    CHECK_STATUS(status, "Failed to hash data");

    status = BCryptFinishHash(hHash, hmac, *hmacLength, 0);
    CHECK_STATUS(status, "Failed to finish HMAC");

cleanup:
    if (hHash) BCryptDestroyHash(hHash);
    if (hAlg) BCryptCloseAlgorithmProvider(hAlg, 0);
    return status;
}

// Encrypt a file with streaming
NTSTATUS EncryptFile(const char* inputPath, const char* outputPath, const char* password) {
    BCRYPT_ALG_HANDLE hAlg = NULL;
    BCRYPT_KEY_HANDLE hKey = NULL;
    NTSTATUS status;
    BYTE key[AES_KEY_LENGTH], nonce[NONCE_LENGTH], hmacKey[HMAC_KEY_LENGTH];
    BYTE* buffer = NULL;
    FILE* fIn = NULL;
    FILE* fOut = NULL;
    DWORD bytesRead, totalBytes = 0, fileSize;

    // Derive keys
    status = DeriveKey(password, key, AES_KEY_LENGTH);
    CHECK_STATUS(status, "Key derivation failed");
    status = DeriveKey(password, hmacKey, HMAC_KEY_LENGTH);
    CHECK_STATUS(status, "HMAC key derivation failed");

    // Open AES-GCM
    status = BCryptOpenAlgorithmProvider(&hAlg, BCRYPT_AES_ALGORITHM, NULL, 0);
    CHECK_STATUS(status, "Failed to open AES provider");
    status = BCryptSetProperty(hAlg, BCRYPT_CHAINING_MODE, (PUCHAR)BCRYPT_CHAIN_MODE_GCM, sizeof(BCRYPT_CHAIN_MODE_GCM), 0);
    CHECK_STATUS(status, "Failed to set GCM mode");

    // Generate key
    status = BCryptGenerateSymmetricKey(hAlg, &hKey, NULL, 0, key, AES_KEY_LENGTH, 0);
    CHECK_STATUS(status, "Failed to generate key");

    // Generate nonce
    status = BCryptGenRandom(NULL, nonce, NONCE_LENGTH, BCRYPT_USE_SYSTEM_PREFERRED_RNG);
    CHECK_STATUS(status, "Failed to generate nonce");

    // Open files
    fIn = fopen(inputPath, "rb");
    if (!fIn) { status = STATUS_UNSUCCESSFUL; CHECK_STATUS(status, "Failed to open input file"); }
    fseek(fIn, 0, SEEK_END);
    fileSize = ftell(fIn);
    fseek(fIn, 0, SEEK_SET);

    fOut = fopen(outputPath, "wb");
    if (!fOut) { status = STATUS_UNSUCCESSFUL; CHECK_STATUS(status, "Failed to open output file"); }

    // Write nonce
    fwrite(nonce, 1, NONCE_LENGTH, fOut);

    // Initialize GCM auth info
    BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO authInfo;
    ZeroMemory(&authInfo, sizeof(authInfo));
    authInfo.cbSize = sizeof(authInfo);
    authInfo.dwInfoVersion = BCRYPT_AUTH_MODE_CHAIN_CALLS_COMPLETED;
    authInfo.pbNonce = nonce;
    authInfo.cbNonce = NONCE_LENGTH;
    BYTE mac[MAC_LENGTH];
    authInfo.pbTag = mac;
    authInfo.cbTag = MAC_LENGTH;

    // Streaming encryption
    buffer = (BYTE*)malloc(CHUNK_SIZE + 16); // +16 for padding
    if (!buffer) { status = STATUS_NO_MEMORY; CHECK_STATUS(status, "Memory allocation failed"); }
    while ((bytesRead = fread(buffer, 1, CHUNK_SIZE, fIn)) > 0) {
        DWORD cbData = bytesRead;
        if (bytesRead < CHUNK_SIZE) {
            // Apply PKCS7 padding
            int paddingLength = 16 - (bytesRead % 16);
            for (int i = bytesRead; i < bytesRead + paddingLength; i++) {
                buffer[i] = paddingLength;
            }
            cbData = bytesRead + paddingLength;
        }

        DWORD cbCipherText;
        status = BCryptEncrypt(hKey, buffer, cbData, &authInfo, NULL, 0, buffer, cbData, &cbCipherText, 0);
        CHECK_STATUS(status, "Encryption failed");

        fwrite(buffer, 1, cbCipherText, fOut);
        totalBytes += bytesRead;

        // Progress indicator
        if (fileSize > 0) {
            printf("\rProgress: %d%%", totalBytes * 100 / fileSize);
            fflush(stdout);
        }
    }
    printf("\n");

    // Finalize GCM tag
    status = BCryptEncrypt(hKey, NULL, 0, &authInfo, NULL, 0, NULL, 0, &cbCipherText, 0);
    CHECK_STATUS(status, "Failed to finalize GCM");

    // Write MAC
    fwrite(mac, 1, MAC_LENGTH, fOut);

    // Compute and write HMAC of (nonce || ciphertext || mac)
    fseek(fOut, 0, SEEK_END);
    long hmacDataSize = ftell(fOut);
    BYTE* hmacData = (BYTE*)malloc(hmacDataSize);
    if (!hmacData) { status = STATUS_NO_MEMORY; CHECK_STATUS(status, "Memory allocation failed"); }
    fseek(fOut, 0, SEEK_SET);
    fread(hmacData, 1, hmacDataSize, fOut);
    BYTE hmac[32];
    DWORD hmacLength = 32;
    status = ComputeHMAC(hmacData, hmacDataSize, hmacKey, HMAC_KEY_LENGTH, hmac, &hmacLength);
    CHECK_STATUS(status, "HMAC computation failed");
    fwrite(hmac, 1, hmacLength, fOut);

cleanup:
    if (buffer) free(buffer);
    if (hmacData) free(hmacData);
    if (fIn) fclose(fIn);
    if (fOut) fclose(fOut);
    if (hKey) BCryptDestroyKey(hKey);
    if (hAlg) BCryptCloseAlgorithmProvider(hAlg, 0);
    return status;
}

// Decrypt a file with streaming
NTSTATUS DecryptFile(const char* inputPath, const char* outputPath, const char* password) {
    BCRYPT_ALG_HANDLE hAlg = NULL;
    BCRYPT_KEY_HANDLE hKey = NULL;
    NTSTATUS status;
    BYTE key[AES_KEY_LENGTH], nonce[NONCE_LENGTH], mac[MAC_LENGTH], hmacKey[HMAC_KEY_LENGTH];
    BYTE* buffer = NULL, *hmacData = NULL;
    FILE* fIn = NULL;
    FILE* fOut = NULL;
    DWORD bytesRead, totalBytes = 0, fileSize;

    // Derive keys
    status = DeriveKey(password, key, AES_KEY_LENGTH);
    CHECK_STATUS(status, "Key derivation failed");
    status = DeriveKey(password, hmacKey, HMAC_KEY_LENGTH);
    CHECK_STATUS(status, "HMAC key derivation failed");

    // Open AES-GCM
    status = BCryptOpenAlgorithmProvider(&hAlg, BCRYPT_AES_ALGORITHM, NULL, 0);
    CHECK_STATUS(status, "Failed to open AES provider");
    status = BCryptSetProperty(hAlg, BCRYPT_CHAINING_MODE, (PUCHAR)BCRYPT_CHAIN_MODE_GCM, sizeof(BCRYPT_CHAIN_MODE_GCM), 0);
    CHECK_STATUS(status, "Failed to set GCM mode");

    // Generate key
    status = BCryptGenerateSymmetricKey(hAlg, &hKey, NULL, 0, key, AES_KEY_LENGTH, 0);
    CHECK_STATUS(status, "Failed to generate key");

    // Open files
    fIn = fopen(inputPath, "rb");
    if (!fIn) { status = STATUS_UNSUCCESSFUL; CHECK_STATUS(status, "Failed to open input file"); }
    fseek(fIn, 0, SEEK_END);
    fileSize = ftell(fIn);
    fseek(fIn, 0, SEEK_SET);

    // Read HMAC
    if (fileSize < NONCE_LENGTH + MAC_LENGTH + 32) { status = STATUS_UNSUCCESSFUL; CHECK_STATUS(status, "Invalid input file"); }
    fseek(fIn, fileSize - 32, SEEK_SET);
    BYTE storedHmac[32];
    fread(storedHmac, 1, 32, fIn);
    fileSize -= 32;

    // Read nonce and MAC
    fseek(fIn, 0, SEEK_SET);
    fread(nonce, 1, NONCE_LENGTH, fIn);
    fseek(fIn, fileSize - MAC_LENGTH, SEEK_SET);
    fread(mac, 1, MAC_LENGTH, fIn);
    fseek(fIn, NONCE_LENGTH, SEEK_SET);

    // Verify HMAC
    hmacData = (BYTE*)malloc(fileSize);
    if (!hmacData) { status = STATUS_NO_MEMORY; CHECK_STATUS(status, "Memory allocation failed"); }
    fread(hmacData, 1, fileSize - NONCE_LENGTH, fIn);
    BYTE computedHmac[32];
    DWORD hmacLength = 32;
    status = ComputeHMAC(hmacData, hmacDataSize, hmacKey, HMAC_KEY_LENGTH, computedHmac, &hmacLength);
    CHECK_STATUS(status, "HMAC computation failed");
    if (memcmp(computedHmac, storedHmac, 32) != 0) {
        status = STATUS_UNSUCCESSFUL;
        CHECK_STATUS(status, "HMAC verification failed");
    }

    // Reopen file for decryption
    fseek(fIn, NONCE_LENGTH, SEEK_SET);
    fOut = fopen(outputPath, "wb");
    if (!fOut) { status = STATUS_UNSUCCESSFUL; CHECK_STATUS(status, "Failed to open output file"); }

    // Initialize GCM auth info
    BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO authInfo;
    ZeroMemory(&authInfo, sizeof(authInfo));
    authInfo.cbSize = sizeof(authInfo);
    authInfo.dwInfoVersion = BCRYPT_AUTH_MODE_CHAIN_CALLS_COMPLETED;
    authInfo.pbNonce = nonce;
    authInfo.cbNonce = NONCE_LENGTH;
    authInfo.pbTag = mac;
    authInfo.cbTag = MAC_LENGTH;

    // Streaming decryption
    buffer = (BYTE*)malloc(CHUNK_SIZE);
    if (!buffer) { status = STATUS_NO_MEMORY; CHECK_STATUS(status, "Memory allocation failed"); }
    while ((bytesRead = fread(buffer, 1, CHUNK_SIZE, fIn)) > 0 && totalBytes < fileSize - NONCE_LENGTH - MAC_LENGTH) {
        DWORD cbData = bytesRead;
        DWORD cbPlainText;
        status = BCryptDecrypt(hKey, buffer, cbData, &authInfo, NULL, 0, buffer, cbData, &cbPlainText, 0);
        CHECK_STATUS(status, "Decryption failed");

        // Write plaintext (remove padding on last chunk)
        if (totalBytes + cbData >= fileSize - NONCE_LENGTH - MAC_LENGTH) {
            int paddingLength = buffer[cbPlainText - 1];
            if (paddingLength > 0 && paddingLength <= 16) {
                cbPlainText -= paddingLength;
            }
        }
        fwrite(buffer, 1, cbPlainText, fOut);
        totalBytes += bytesRead;

        // Progress indicator
        if (fileSize > 0) {
            printf("\rProgress: %d%%", totalBytes * 100 / (fileSize - NONCE_LENGTH - MAC_LENGTH));
            fflush(stdout);
        }
    }
    printf("\n");

    // Verify GCM tag
    status = BCryptDecrypt(hKey, NULL, 0, &authInfo, NULL, 0, NULL, 0, &cbPlainText, 0);
    CHECK_STATUS(status, "GCM verification failed");

cleanup:
    if (buffer) free(buffer);
    if (hmacData) free(hmacData);
    if (fIn) fclose(fIn);
    if (fOut) fclose(fOut);
    if (hKey) BCryptDestroyKey(hKey);
    if (hAlg) BCryptCloseAlgorithmProvider(hAlg, 0);
    return status;
}

// Get CD/DVD drive letter
char GetDiscDrive() {
    char path[MAX_PATH_LENGTH];
    GetModuleFileNameA(NULL, path, MAX_PATH_LENGTH);
    if (path[1] == ':') {
        char drive = path[0];
        if (GetDriveTypeA(path) == DRIVE_CDROM) {
            return drive;
        }
    }
    DWORD drives = GetLogicalDrives();
    for (int i = 0; i < 26; i++) {
        if (drives & (1 << i)) {
            char d = 'A' + i;
            char root[4] = { d, ':', '\\', '\0' };
            if (GetDriveTypeA(root) == DRIVE_CDROM) {
                return d;
            }
        }
    }
    return '\0';
}

// Check if disc is writable
BOOL IsDiscWritable(const char* root) {
    char tempPath[MAX_PATH_LENGTH];
    snprintf(tempPath, MAX_PATH_LENGTH, "%s\\test.tmp", root);
    FILE* f = fopen(tempPath, "wb");
    if (f) {
        fclose(f);
        remove(tempPath);
        return TRUE;
    }
    return FALSE;
}

// List files on disc
void ListFiles(const char* root, int decryptMode) {
    char searchPath[MAX_PATH_LENGTH];
    snprintf(searchPath, MAX_PATH_LENGTH, "%s\\*.*", root);
    WIN32_FIND_DATAA findData;
    HANDLE hFind = FindFirstFileA(searchPath, &findData);
    if (hFind == INVALID_HANDLE_VALUE) return;

    do {
        if (strcmp(findData.cFileName, ".") == 0 || strcmp(findData.cFileName, "..") == 0) continue;
        char fullPath[MAX_PATH_LENGTH];
        snprintf(fullPath, MAX_PATH_LENGTH, "%s\\%s", root, findData.cFileName);
        if (findData.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY) {
            ListFiles(fullPath, decryptMode);
        } else {
            if (decryptMode && !strstr(findData.cFileName, ".enc")) continue;
            printf("- %s\n", fullPath + 3); // Skip drive letter (e.g., "D:\")
        }
    } while (FindNextFileA(hFind, &findData));
    FindClose(hFind);
}

// Parse comma-separated file list
char** ParseFileList(const char* input, const char* root, int* count) {
    char* copy = strdup(input);
    char* token = strtok(copy, ",");
    char** files = NULL;
    *count = 0;

    while (token) {
        // Trim whitespace
        while (*token == ' ') token++;
        char* end = token + strlen(token) - 1;
        while (end > token && *end == ' ') end--;
        *(end + 1) = '\0';

        files = (char**)realloc(files, (*count + 1) * sizeof(char*));
        files[*count] = (char*)malloc(MAX_PATH_LENGTH);
        snprintf(files[*count], MAX_PATH_LENGTH, "%s%s", root, token);
        (*count)++;
        token = strtok(NULL, ",");
    }

    free(copy);
    return files;
}

int main() {
    printf("CD/DVD Encryption/Decryption Tool (FIPS 140-2)\n");
    printf("=============================================\n");

    // Get disc drive
    char drive = GetDiscDrive();
    if (drive == '\0') {
        printf("Error: No CD/DVD drive detected.\n");
        return 1;
    }
    char root[MAX_PATH_LENGTH];
    snprintf(root, MAX_PATH_LENGTH, "%c:\\", drive);
    printf("Detected disc: %s\n", root);
    BOOL isDiscWritable = IsDiscWritable(root);

    // Prompt for action
    char action[10];
    printf("Choose action (encrypt/decrypt): ");
    scanf("%s", action);
    getchar(); // Clear newline
    int decryptMode = _stricmp(action, "decrypt") == 0;
    if (!_stricmp(action, "encrypt") && !decryptMode) {
        decryptMode = 0;
    } else if (decryptMode) {
        decryptMode = 1;
    } else {
        printf("Invalid action. Use 'encrypt' or 'decrypt'.\n");
        return 1;
    }

    // List files
    printf("Available files:\n");
    ListFiles(root, decryptMode);

    // Prompt for file list
    char fileList[1024];
    printf("Enter file paths (comma-separated, relative to disc, e.g., folder\\file1.txt,folder\\file2.txt): ");
    fgets(fileList, 1024, stdin);
    size_t len = strlen(fileList);
    if (len > 0 && fileList[len - 1] == '\n') {
        fileList[len - 1] = '\0';
    }

    // Parse file list
    int fileCount;
    char** files = ParseFileList(fileList, root, &fileCount);
    if (fileCount == 0) {
        printf("Error: No files specified.\n");
        return 1;
    }

    // Validate files
    for (int i = 0; i < fileCount; i++) {
        if (GetFileAttributesA(files[i]) == INVALID_FILE_ATTRIBUTES) {
            printf("Error: File not found: %s\n", files[i] + 3);
            for (int j = 0; j < fileCount; j++) free(files[j]);
            free(files);
            return 1;
        }
        if (decryptMode && !strstr(files[i], ".enc")) {
            printf("Error: File must have .enc extension for decryption: %s\n", files[i] + 3);
            for (int j = 0; j < fileCount; j++) free(files[j]);
            free(files);
            return 1;
        }
    }

    // Prompt for password
    char* password = GetPassword();
    if (!password || strlen(password) == 0) {
        printf("Error: Password cannot be empty.\n");
        if (password) free(password);
        for (int j = 0; j < fileCount; j++) free(files[j]);
        free(files);
        return 1;
    }

    // Set output paths
    char** outputPaths = (char**)malloc(fileCount * sizeof(char*));
    char outputDir[MAX_PATH_LENGTH];
    if (!isDiscWritable) {
        printf("Disc is read-only. Enter output directory (e.g., C:\\output): ");
        fgets(outputDir, MAX_PATH_LENGTH, stdin);
        len = strlen(outputDir);
        if (len > 0 && outputDir[len - 1] == '\n') {
            outputDir[len - 1] = '\0';
        }
        if (!outputDir[0] || !strchr(outputDir, ':')) {
            printf("Error: Valid output directory required.\n");
            free(password);
            for (int j = 0; j < fileCount; j++) free(files[j]);
            free(files);
            free(outputPaths);
            return 1;
        }
        CreateDirectoryA(outputDir, NULL);
    } else {
        strcpy(outputDir, root);
    }

    for (int i = 0; i < fileCount; i++) {
        outputPaths[i] = (char*)malloc(MAX_PATH_LENGTH);
        char* fileName = strrchr(files[i], '\\') + 1;
        if (decryptMode) {
            char* ext = strstr(fileName, ".enc");
            char temp[MAX_PATH_LENGTH];
            strncpy(temp, fileName, ext - fileName);
            temp[ext - fileName] = '\0';
            snprintf(outputPaths[i], MAX_PATH_LENGTH, "%s\\%s", outputDir, temp);
        } else {
            snprintf(outputPaths[i], MAX_PATH_LENGTH, "%s\\%s.enc", outputDir, fileName);
        }

        // Create output directory
        char* dir = strrchr(outputPaths[i], '\\');
        if (dir) {
            *dir = '\0';
            CreateDirectoryA(outputPaths[i], NULL);
            *dir = '\\';
        }
    }

    // Process files
    NTSTATUS status = STATUS_SUCCESS;
    for (int i = 0; i < fileCount; i++) {
        printf("%s %s...\n", decryptMode ? "Decrypting" : "Encrypting", files[i] + 3);
        if (decryptMode) {
            status = DecryptFile(files[i], outputPaths[i], password);
        } else {
            status = EncryptFile(files[i], outputPaths[i], password);
        }

        if (!NT_SUCCESS(status)) {
            printf("Failed to %s %s.\n", decryptMode ? "decrypt" : "encrypt", files[i] + 3);
            break;
        }
        printf("Completed: %s\n", outputPaths[i]);
    }

    // Cleanup
    free(password);
    for (int i = 0; i < fileCount; i++) {
        free(files[i]);
        free(outputPaths[i]);
    }
    free(files);
    free(outputPaths);

    if (NT_SUCCESS(status)) {
        printf("Operation completed successfully!\n");
        return 0;
    } else {
        printf("Operation failed.\n");
        return 1;
    }
}